
//checking banner size
var metaSize = document.querySelector('meta[name="ad.size"]').content;
var objSize = metaSize.split(",").reduce( (objSize, s) => {
    var [key, value] = s.match(/[^\s;=]+/g);
    objSize[key] = isNaN(value) ? value : +value;
    return objSize;
}, {});


function frame0() {

    gsap.registerPlugin(SplitText);


    exportRoot.mainMC.cta = document.getElementById("cta");
    exportRoot.mainMC.arrowCta = document.getElementById("arrow");
    exportRoot.mainMC.replay_btn = document.getElementById("rHit");

    //set the with and height


    frameAnim0();

    exportRoot.initBanner = function (lib) {
        exportRoot.isReplay = false;
        showCopy(1);

        //dimensions setup
        document.getElementById("outline").style.width = document.getElementById("animation_container").style.width =
            document.getElementById("dom_overlay_container").style.width = objSize.width+"px";
        document.getElementById("outline").style.height = document.getElementById("animation_container").style.height =
            document.getElementById("dom_overlay_container").style.height = objSize.height+"px";
        document.getElementById("canvas").attributes.widh = objSize.width;
        document.getElementById("canvas").attributes.height = objSize.height;
        document.getElementById("rHit").style.left = (objSize.width - 12 - 4) + "px";

        // arrowCta animation
        exportRoot.arrowCtaPlaying = 0;
        exportRoot.tlArrowCta = gsap.timeline();
        exportRoot.tlArrowCta.to(exportRoot.mainMC.arrowCta, {duration:0.2, x:"+=10", ease:"power2.in", onStart: function (){exportRoot.arrowCtaPlaying = 1;}})
            .to(exportRoot.mainMC.arrowCta, {duration:0.01, x:"-=20"})
            .to(exportRoot.mainMC.arrowCta, {duration:0.4, x:"+=10", ease:"power2.Out", onComplete: function (){exportRoot.arrowCtaPlaying = 0;}})
        exportRoot.tlArrowCta.pause();
    }

}
function showCopy(n) {
    var copy = document.getElementsByClassName("copy");
    for(let i=0; i<copy.length; i++) {
        if(n==1) copy[i].style.visibility = "visible";
        if(n==0) copy[i].style.visibility = "hidden";
    }
}

///////// Object for copy Text ///////////////////////
var copyText = {
    domObjects: [],
    create(tmpVar) {
        for(let i = 0; i < tmpVar.length; i++) {
            exportRoot.mainMC[tmpVar[i]] = new SplitText("#"+tmpVar[i]);
            copyText.domObjects.push(tmpVar[i]);
        }
    },
    release() {
        for(let r = 0; r < copyText.domObjects.length; r++) {
            if(exportRoot.mainMC[copyText.domObjects[r]].lines[0].style.opacity==0) {
                document.getElementById(copyText.domObjects[r]).style.visibility = "hidden";
                exportRoot.mainMC[copyText.domObjects[r]].revert();
            }
        }
        copyText.domObjects = [];
    }
}



//////// Animate scripts and loading /////////////////
var initDiv = document.getElementById("init");
var canvas, stage, exportRoot, anim_container, dom_overlay_container, fnStartAnimation, initReady
initReady=false
function init() {
    canvas = document.getElementById("canvas");
    anim_container = document.getElementById("animation_container");
    dom_overlay_container = document.getElementById("dom_overlay_container");
    var comp=AdobeAn.getComposition(animateCompositionN);
    var lib=comp.getLibrary();
    var loader = new createjs.LoadQueue(false);
    loader.addEventListener("fileload", function(evt){handleFileLoad(evt,comp)});
    loader.addEventListener("complete", function(evt){handleComplete(evt,comp)});
    var lib=comp.getLibrary();
    loader.loadManifest(lib.properties.manifest);
}
function handleFileLoad(evt, comp) {
    var images=comp.getImages();
    if (evt && (evt.item.type == "image")) { images[evt.item.id] = evt.result; }
}
function handleComplete(evt,comp) {
    //This function is always called, irrespective of the content. You can use the variable "stage" after it is created in token create_stage.
    var lib=comp.getLibrary();
    var ss=comp.getSpriteSheet();
    var queue = evt.target;
    var ssMetadata = lib.ssMetadata;
    for(i=0; i<ssMetadata.length; i++) {
        ss[ssMetadata[i].name] = new createjs.SpriteSheet( {"images": [queue.getResult(ssMetadata[i].name)], "frames": ssMetadata[i].frames} )
    }
    exportRoot = createLib();
    stage = new lib.Stage(canvas);
    //Registers the "tick" event listener.
    fnStartAnimation = function() {
        stage.addChild(exportRoot);
        createjs.Ticker.framerate = lib.properties.fps;
        /*if (navigator.userAgent.indexOf("Firefox") > -1 && navigator.appVersion.includes("Windows")) {
            createjs.Ticker.framerate = 35;
        }*/
        createjs.Ticker.addEventListener("tick", stage);
    }
    //Code to support hidpi screens and responsive scaling.
    AdobeAn.makeResponsive(false,'both',false,2,[canvas,anim_container,dom_overlay_container]);
    AdobeAn.compositionLoaded(lib.properties.id);
    fnStartAnimation();

    if (!initReady) {
        startBanner()
    }
    gsap.delayedCall(0.4,function(){
        exportRoot.initBanner(lib)
        exportRoot.runBanner()
        initDiv.style.visibility='hidden'
    });
    initReady=true
}

//FONT loading check
var checkForFonts = 0;
for (i=0; i < fontToLoad.length; i++) {
    (function (){
        var fontTmp = new FontFace(fontToLoad[i][0],fontToLoad[i][1]);
        fontTmp.load().then(function(loaded_face) {
            document.fonts.add(loaded_face);
            checkForFonts++;
            if (checkForFonts==fontToLoad.length)
                loaded('font');
        }).catch(function(error) {
            console.log("check font: "+error);
        });
    }());
}
/*document.fonts.ready.then(function(font_face_set) {
    loaded('font');
});*/


//check loading
var loadFont = false;
var loadBody = false;
function loaded(type) {
    if (type=='font') loadFont=true;
    if (type=='body') loadBody=true;
    if (loadFont && loadBody) init();
}



//////// interaction with mouse //////////////////////////////////////////////////////////////////////
function startBanner() {
    var outline = document.getElementById("outline");
    outline.addEventListener("mouseenter", over.bind(this));
    function over() {
        if(exportRoot.arrowCtaPlaying!=1) exportRoot.tlArrowCta.restart();
    }

    outline.addEventListener("click", exitHandler.bind(this));
    function exitHandler() {
        window.open(clickTag);
    }



    var rHit = document.getElementById("rHit");
    rHit.addEventListener("mouseover", rHitOver.bind(this));
    function rHitOver() {
        if(exportRoot.isReplay==true)
            rHit.classList.add("solid");
    }

    rHit.addEventListener("mouseout", rHitOut.bind(this));
    function rHitOut() {
        rHit.classList.remove("solid");
    }

    rHit.addEventListener("click", replay.bind(this));

    function replay() {
        if (exportRoot.isReplay == true){
            rHit.classList.remove("solid");
            //rHit.classList.replace("replay-dark","replay-light");
            showCopy(0);
            initDiv.style.visibility='visible';
            stage.removeAllChildren();
            stage.update();
            var canvas = document.getElementById('canvas');
            context = canvas.getContext('2d');

            // Store the current transformation matrix
            context.save();

            // Use the identity matrix while clearing the canvas
            context.setTransform(1, 0, 0, 1, 0, 0);
            context.clearRect(0, 0, canvas.width, canvas.height);

            // Restore the transform
            context.restore(); //CLEARS THE SPECIFIC CANVAS COMPLETELY FOR NEW DRAWING

            gsap.delayedCall(0.1,init);
        }
    }
}